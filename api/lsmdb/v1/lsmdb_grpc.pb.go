// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: api/lsmdb/v1/lsmdb.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lsmdb_OpenDB_FullMethodName = "/lsmdb.v1.Lsmdb/OpenDB"
	Lsmdb_Put_FullMethodName    = "/lsmdb.v1.Lsmdb/Put"
	Lsmdb_PutStr_FullMethodName = "/lsmdb.v1.Lsmdb/PutStr"
	Lsmdb_Get_FullMethodName    = "/lsmdb.v1.Lsmdb/Get"
)

// LsmdbClient is the client API for Lsmdb service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LsmdbClient interface {
	// Sends a register
	OpenDB(ctx context.Context, in *OpenDBRequest, opts ...grpc.CallOption) (*OpenDBReply, error)
	Put(ctx context.Context, opts ...grpc.CallOption) (Lsmdb_PutClient, error)
	PutStr(ctx context.Context, in *PutStrRequest, opts ...grpc.CallOption) (*PutStrReply, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Lsmdb_GetClient, error)
}

type lsmdbClient struct {
	cc grpc.ClientConnInterface
}

func NewLsmdbClient(cc grpc.ClientConnInterface) LsmdbClient {
	return &lsmdbClient{cc}
}

func (c *lsmdbClient) OpenDB(ctx context.Context, in *OpenDBRequest, opts ...grpc.CallOption) (*OpenDBReply, error) {
	out := new(OpenDBReply)
	err := c.cc.Invoke(ctx, Lsmdb_OpenDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lsmdbClient) Put(ctx context.Context, opts ...grpc.CallOption) (Lsmdb_PutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lsmdb_ServiceDesc.Streams[0], Lsmdb_Put_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lsmdbPutClient{stream}
	return x, nil
}

type Lsmdb_PutClient interface {
	Send(*PutRequest) error
	CloseAndRecv() (*PutReply, error)
	grpc.ClientStream
}

type lsmdbPutClient struct {
	grpc.ClientStream
}

func (x *lsmdbPutClient) Send(m *PutRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *lsmdbPutClient) CloseAndRecv() (*PutReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PutReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lsmdbClient) PutStr(ctx context.Context, in *PutStrRequest, opts ...grpc.CallOption) (*PutStrReply, error) {
	out := new(PutStrReply)
	err := c.cc.Invoke(ctx, Lsmdb_PutStr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lsmdbClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (Lsmdb_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Lsmdb_ServiceDesc.Streams[1], Lsmdb_Get_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &lsmdbGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lsmdb_GetClient interface {
	Recv() (*GetReply, error)
	grpc.ClientStream
}

type lsmdbGetClient struct {
	grpc.ClientStream
}

func (x *lsmdbGetClient) Recv() (*GetReply, error) {
	m := new(GetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LsmdbServer is the server API for Lsmdb service.
// All implementations must embed UnimplementedLsmdbServer
// for forward compatibility
type LsmdbServer interface {
	// Sends a register
	OpenDB(context.Context, *OpenDBRequest) (*OpenDBReply, error)
	Put(Lsmdb_PutServer) error
	PutStr(context.Context, *PutStrRequest) (*PutStrReply, error)
	Get(*GetRequest, Lsmdb_GetServer) error
	mustEmbedUnimplementedLsmdbServer()
}

// UnimplementedLsmdbServer must be embedded to have forward compatible implementations.
type UnimplementedLsmdbServer struct {
}

func (UnimplementedLsmdbServer) OpenDB(context.Context, *OpenDBRequest) (*OpenDBReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDB not implemented")
}
func (UnimplementedLsmdbServer) Put(Lsmdb_PutServer) error {
	return status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLsmdbServer) PutStr(context.Context, *PutStrRequest) (*PutStrReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStr not implemented")
}
func (UnimplementedLsmdbServer) Get(*GetRequest, Lsmdb_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLsmdbServer) mustEmbedUnimplementedLsmdbServer() {}

// UnsafeLsmdbServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LsmdbServer will
// result in compilation errors.
type UnsafeLsmdbServer interface {
	mustEmbedUnimplementedLsmdbServer()
}

func RegisterLsmdbServer(s grpc.ServiceRegistrar, srv LsmdbServer) {
	s.RegisterService(&Lsmdb_ServiceDesc, srv)
}

func _Lsmdb_OpenDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LsmdbServer).OpenDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lsmdb_OpenDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LsmdbServer).OpenDB(ctx, req.(*OpenDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lsmdb_Put_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LsmdbServer).Put(&lsmdbPutServer{stream})
}

type Lsmdb_PutServer interface {
	SendAndClose(*PutReply) error
	Recv() (*PutRequest, error)
	grpc.ServerStream
}

type lsmdbPutServer struct {
	grpc.ServerStream
}

func (x *lsmdbPutServer) SendAndClose(m *PutReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *lsmdbPutServer) Recv() (*PutRequest, error) {
	m := new(PutRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Lsmdb_PutStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LsmdbServer).PutStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lsmdb_PutStr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LsmdbServer).PutStr(ctx, req.(*PutStrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lsmdb_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LsmdbServer).Get(m, &lsmdbGetServer{stream})
}

type Lsmdb_GetServer interface {
	Send(*GetReply) error
	grpc.ServerStream
}

type lsmdbGetServer struct {
	grpc.ServerStream
}

func (x *lsmdbGetServer) Send(m *GetReply) error {
	return x.ServerStream.SendMsg(m)
}

// Lsmdb_ServiceDesc is the grpc.ServiceDesc for Lsmdb service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lsmdb_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lsmdb.v1.Lsmdb",
	HandlerType: (*LsmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDB",
			Handler:    _Lsmdb_OpenDB_Handler,
		},
		{
			MethodName: "PutStr",
			Handler:    _Lsmdb_PutStr_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Put",
			Handler:       _Lsmdb_Put_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Get",
			Handler:       _Lsmdb_Get_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/lsmdb/v1/lsmdb.proto",
}
