syntax = "proto3";

package lsmdb.v1;

import "google/api/annotations.proto";

// option go_package = "github.com/ZLSMDB/lsmdb_server/api/lsmdb/v1;v1";
// option java_multiple_files = true;
option java_package = "com.example.lsmdb";
option java_outer_classname = "LsmdbProto";

// The Lsmdb service definition.
service Lsmdb {
  // Sends a register
  rpc OpenDB (OpenDBRequest) returns (OpenDBReply) {
    option (google.api.http) = {
      post: "/opendb"
      body: "*"
    };
  }

  rpc OpenDBWeb (OpenDBWebRequest) returns (OpenDBWebReply) {
    option (google.api.http) = {
      get: "/opendb/{dbname}"
    };
  }
  
  /*
   rpc Put (stream PutRequest) returns (PutReply) {
    option (google.api.http) = {
      post: "/lsmdb/put"
      body: "*"
    };
  }
  */
  rpc Put (PutRequest) returns (PutReply) {
    option (google.api.http) = {
      post: "/put"
      body: "*"
    };
  }

  rpc PutStr (PutStrRequest) returns (PutStrReply) {
    option (google.api.http) = {
      post: "/putstr"
      body: "*"
    };
  }

  /*
    rpc Get (GetRequest) returns (stream GetReply) {
    option (google.api.http) = {
      get: "/lsmdb/get/{key}"
    };
  }
  */
  rpc Get (GetRequest) returns (GetReply) {
    option (google.api.http) = {
      get: "/get/{key=**}" /*  */
    };
  }

  rpc CloseDB(CloseDBRequest) returns (CloseDBReply) {
    option (google.api.http) = {
      post: "/close"
    };
  }

  rpc CloseDBWeb(CloseDBWebRequest) returns (CloseDBWebReply) {
    option (google.api.http) = {
      get: "/close"
    };
  }
}

message OpenDBWebRequest {
  string dbname = 1;
}

message OpenDBWebReply {
  bool value = 1;
}

// 命名必须使用下划线，否则出现传递不了参数的情况
message OpenDBRequest {
  string db_name = 1;
}

// The response message containing the value about register success or not .
message OpenDBReply {
  bool value = 1;
}

message PutRequest {
  string key = 1;
  bytes value = 2;
}

message PutReply {
  bool data = 1;
}

message PutStrRequest {
  string key = 1;
  string value = 2;
}

message PutStrReply {
  bool data = 1;
}

// The request message containing mac addr and ip.
message GetRequest {
  string key = 1;
}

// The response message containing the value about register success or not .
message GetReply {
  bytes value = 1;
}

message CloseDBRequest {}

message CloseDBReply {}

message CloseDBWebRequest {
}

message CloseDBWebReply {}