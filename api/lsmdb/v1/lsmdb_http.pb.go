// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v3.20.3
// source: api/lsmdb/v1/lsmdb.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationLsmdbBatchPut = "/lsmdb.v1.Lsmdb/BatchPut"
const OperationLsmdbCloseDB = "/lsmdb.v1.Lsmdb/CloseDB"
const OperationLsmdbCloseDBWeb = "/lsmdb.v1.Lsmdb/CloseDBWeb"
const OperationLsmdbGet = "/lsmdb.v1.Lsmdb/Get"
const OperationLsmdbGetKVs = "/lsmdb.v1.Lsmdb/GetKVs"
const OperationLsmdbOpenDB = "/lsmdb.v1.Lsmdb/OpenDB"
const OperationLsmdbOpenDBWeb = "/lsmdb.v1.Lsmdb/OpenDBWeb"
const OperationLsmdbPut = "/lsmdb.v1.Lsmdb/Put"
const OperationLsmdbPutStr = "/lsmdb.v1.Lsmdb/PutStr"
const OperationLsmdbTransfer = "/lsmdb.v1.Lsmdb/Transfer"
const OperationLsmdbTransferKV = "/lsmdb.v1.Lsmdb/TransferKV"

type LsmdbHTTPServer interface {
	BatchPut(context.Context, *BatchPutRequest) (*BatchPutReply, error)
	CloseDB(context.Context, *CloseDBRequest) (*CloseDBReply, error)
	CloseDBWeb(context.Context, *CloseDBWebRequest) (*CloseDBWebReply, error)
	// Get
	//rpc Get (GetRequest) returns (stream GetReply) {
	//option (google.api.http) = {
	//get: "/lsmdb/get/{key}"
	//};
	//}
	Get(context.Context, *GetRequest) (*GetReply, error)
	GetKVs(context.Context, *GetKVsRequest) (*GetKVsReply, error)
	// OpenDB Sends a register
	OpenDB(context.Context, *OpenDBRequest) (*OpenDBReply, error)
	OpenDBWeb(context.Context, *OpenDBWebRequest) (*OpenDBWebReply, error)
	// Put
	//rpc Put (stream PutRequest) returns (PutReply) {
	//option (google.api.http) = {
	//post: "/lsmdb/put"
	//body: "*"
	//};
	//}
	Put(context.Context, *PutRequest) (*PutReply, error)
	PutStr(context.Context, *PutStrRequest) (*PutStrReply, error)
	Transfer(context.Context, *TransferRequest) (*TransferReply, error)
	TransferKV(context.Context, *TransferKVRequest) (*TransferKVReply, error)
}

func RegisterLsmdbHTTPServer(s *http.Server, srv LsmdbHTTPServer) {
	r := s.Route("/")
	r.POST("/opendb", _Lsmdb_OpenDB0_HTTP_Handler(srv))
	r.GET("/opendb/{dbname}", _Lsmdb_OpenDBWeb0_HTTP_Handler(srv))
	r.POST("/put", _Lsmdb_Put0_HTTP_Handler(srv))
	r.POST("/batchput", _Lsmdb_BatchPut0_HTTP_Handler(srv))
	r.POST("/putstr", _Lsmdb_PutStr0_HTTP_Handler(srv))
	r.GET("/get/{key:.*.*}", _Lsmdb_Get0_HTTP_Handler(srv))
	r.POST("/close", _Lsmdb_CloseDB0_HTTP_Handler(srv))
	r.GET("/close", _Lsmdb_CloseDBWeb0_HTTP_Handler(srv))
	r.POST("/transferkv", _Lsmdb_TransferKV0_HTTP_Handler(srv))
	r.POST("/Transfer", _Lsmdb_Transfer0_HTTP_Handler(srv))
	r.POST("/GetKVs", _Lsmdb_GetKVs0_HTTP_Handler(srv))
}

func _Lsmdb_OpenDB0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenDBRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbOpenDB)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenDB(ctx, req.(*OpenDBRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenDBReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_OpenDBWeb0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in OpenDBWebRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbOpenDBWeb)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.OpenDBWeb(ctx, req.(*OpenDBWebRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OpenDBWebReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_Put0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbPut)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Put(ctx, req.(*PutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PutReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_BatchPut0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchPutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbBatchPut)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchPut(ctx, req.(*BatchPutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchPutReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_PutStr0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PutStrRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbPutStr)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PutStr(ctx, req.(*PutStrRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PutStrReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_Get0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*GetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_CloseDB0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseDBRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbCloseDB)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseDB(ctx, req.(*CloseDBRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseDBReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_CloseDBWeb0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CloseDBWebRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbCloseDBWeb)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CloseDBWeb(ctx, req.(*CloseDBWebRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CloseDBWebReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_TransferKV0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferKVRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbTransferKV)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TransferKV(ctx, req.(*TransferKVRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransferKVReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_Transfer0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TransferRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbTransfer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Transfer(ctx, req.(*TransferRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TransferReply)
		return ctx.Result(200, reply)
	}
}

func _Lsmdb_GetKVs0_HTTP_Handler(srv LsmdbHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetKVsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationLsmdbGetKVs)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKVs(ctx, req.(*GetKVsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetKVsReply)
		return ctx.Result(200, reply)
	}
}

type LsmdbHTTPClient interface {
	BatchPut(ctx context.Context, req *BatchPutRequest, opts ...http.CallOption) (rsp *BatchPutReply, err error)
	CloseDB(ctx context.Context, req *CloseDBRequest, opts ...http.CallOption) (rsp *CloseDBReply, err error)
	CloseDBWeb(ctx context.Context, req *CloseDBWebRequest, opts ...http.CallOption) (rsp *CloseDBWebReply, err error)
	Get(ctx context.Context, req *GetRequest, opts ...http.CallOption) (rsp *GetReply, err error)
	GetKVs(ctx context.Context, req *GetKVsRequest, opts ...http.CallOption) (rsp *GetKVsReply, err error)
	OpenDB(ctx context.Context, req *OpenDBRequest, opts ...http.CallOption) (rsp *OpenDBReply, err error)
	OpenDBWeb(ctx context.Context, req *OpenDBWebRequest, opts ...http.CallOption) (rsp *OpenDBWebReply, err error)
	Put(ctx context.Context, req *PutRequest, opts ...http.CallOption) (rsp *PutReply, err error)
	PutStr(ctx context.Context, req *PutStrRequest, opts ...http.CallOption) (rsp *PutStrReply, err error)
	Transfer(ctx context.Context, req *TransferRequest, opts ...http.CallOption) (rsp *TransferReply, err error)
	TransferKV(ctx context.Context, req *TransferKVRequest, opts ...http.CallOption) (rsp *TransferKVReply, err error)
}

type LsmdbHTTPClientImpl struct {
	cc *http.Client
}

func NewLsmdbHTTPClient(client *http.Client) LsmdbHTTPClient {
	return &LsmdbHTTPClientImpl{client}
}

func (c *LsmdbHTTPClientImpl) BatchPut(ctx context.Context, in *BatchPutRequest, opts ...http.CallOption) (*BatchPutReply, error) {
	var out BatchPutReply
	pattern := "/batchput"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLsmdbBatchPut))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) CloseDB(ctx context.Context, in *CloseDBRequest, opts ...http.CallOption) (*CloseDBReply, error) {
	var out CloseDBReply
	pattern := "/close"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbCloseDB))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) CloseDBWeb(ctx context.Context, in *CloseDBWebRequest, opts ...http.CallOption) (*CloseDBWebReply, error) {
	var out CloseDBWebReply
	pattern := "/close"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbCloseDBWeb))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) Get(ctx context.Context, in *GetRequest, opts ...http.CallOption) (*GetReply, error) {
	var out GetReply
	pattern := "/get/{key:.*.*}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) GetKVs(ctx context.Context, in *GetKVsRequest, opts ...http.CallOption) (*GetKVsReply, error) {
	var out GetKVsReply
	pattern := "/GetKVs"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbGetKVs))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) OpenDB(ctx context.Context, in *OpenDBRequest, opts ...http.CallOption) (*OpenDBReply, error) {
	var out OpenDBReply
	pattern := "/opendb"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLsmdbOpenDB))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) OpenDBWeb(ctx context.Context, in *OpenDBWebRequest, opts ...http.CallOption) (*OpenDBWebReply, error) {
	var out OpenDBWebReply
	pattern := "/opendb/{dbname}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbOpenDBWeb))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) Put(ctx context.Context, in *PutRequest, opts ...http.CallOption) (*PutReply, error) {
	var out PutReply
	pattern := "/put"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLsmdbPut))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) PutStr(ctx context.Context, in *PutStrRequest, opts ...http.CallOption) (*PutStrReply, error) {
	var out PutStrReply
	pattern := "/putstr"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationLsmdbPutStr))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) Transfer(ctx context.Context, in *TransferRequest, opts ...http.CallOption) (*TransferReply, error) {
	var out TransferReply
	pattern := "/Transfer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbTransfer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *LsmdbHTTPClientImpl) TransferKV(ctx context.Context, in *TransferKVRequest, opts ...http.CallOption) (*TransferKVReply, error) {
	var out TransferKVReply
	pattern := "/transferkv"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationLsmdbTransferKV))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
