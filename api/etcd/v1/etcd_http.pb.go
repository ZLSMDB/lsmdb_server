// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.6.1
// source: api/etcd/v1/etcd.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationEtcdGet = "/etcd.v1.Etcd/Get"
const OperationEtcdPut = "/etcd.v1.Etcd/Put"

type EtcdHTTPServer interface {
	Get(context.Context, *EtcdGetRequest) (*EtcdGetReply, error)
	Put(context.Context, *EtcdPutRequest) (*EtcdPutReply, error)
}

func RegisterEtcdHTTPServer(s *http.Server, srv EtcdHTTPServer) {
	r := s.Route("/")
	r.POST("/etcd/put", _Etcd_Put0_HTTP_Handler(srv))
	r.POST("/etcd/get", _Etcd_Get0_HTTP_Handler(srv))
}

func _Etcd_Put0_HTTP_Handler(srv EtcdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EtcdPutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEtcdPut)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Put(ctx, req.(*EtcdPutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EtcdPutReply)
		return ctx.Result(200, reply)
	}
}

func _Etcd_Get0_HTTP_Handler(srv EtcdHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in EtcdGetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationEtcdGet)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Get(ctx, req.(*EtcdGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*EtcdGetReply)
		return ctx.Result(200, reply)
	}
}

type EtcdHTTPClient interface {
	Get(ctx context.Context, req *EtcdGetRequest, opts ...http.CallOption) (rsp *EtcdGetReply, err error)
	Put(ctx context.Context, req *EtcdPutRequest, opts ...http.CallOption) (rsp *EtcdPutReply, err error)
}

type EtcdHTTPClientImpl struct {
	cc *http.Client
}

func NewEtcdHTTPClient(client *http.Client) EtcdHTTPClient {
	return &EtcdHTTPClientImpl{client}
}

func (c *EtcdHTTPClientImpl) Get(ctx context.Context, in *EtcdGetRequest, opts ...http.CallOption) (*EtcdGetReply, error) {
	var out EtcdGetReply
	pattern := "/etcd/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEtcdGet))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *EtcdHTTPClientImpl) Put(ctx context.Context, in *EtcdPutRequest, opts ...http.CallOption) (*EtcdPutReply, error) {
	var out EtcdPutReply
	pattern := "/etcd/put"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationEtcdPut))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
