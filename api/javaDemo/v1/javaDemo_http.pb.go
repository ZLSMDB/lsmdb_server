// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2
// - protoc             v4.25.1
// source: api/javaDemo/v1/javaDemo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationJavaDemoServiceHelloWorld = "/javaDemo.v1.javaDemoService/HelloWorld"

type JavaDemoServiceHTTPServer interface {
	// HelloWorld一个简单的rpc
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
}

func RegisterJavaDemoServiceHTTPServer(s *http.Server, srv JavaDemoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/hello", _JavaDemoService_HelloWorld0_HTTP_Handler(srv))
}

func _JavaDemoService_HelloWorld0_HTTP_Handler(srv JavaDemoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationJavaDemoServiceHelloWorld)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HelloWorld(ctx, req.(*HelloRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HelloResponse)
		return ctx.Result(200, reply)
	}
}

type JavaDemoServiceHTTPClient interface {
	HelloWorld(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloResponse, err error)
}

type JavaDemoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewJavaDemoServiceHTTPClient(client *http.Client) JavaDemoServiceHTTPClient {
	return &JavaDemoServiceHTTPClientImpl{client}
}

func (c *JavaDemoServiceHTTPClientImpl) HelloWorld(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloResponse, error) {
	var out HelloResponse
	pattern := "/hello"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationJavaDemoServiceHelloWorld))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
