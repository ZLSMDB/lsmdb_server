// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/javaDemo/v1/javaDemo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JavaDemoService_HelloWorld_FullMethodName                      = "/javaDemo.v1.javaDemoService/HelloWorld"
	JavaDemoService_HelloWorldClientStream_FullMethodName          = "/javaDemo.v1.javaDemoService/HelloWorldClientStream"
	JavaDemoService_HelloWorldClientAndServerStream_FullMethodName = "/javaDemo.v1.javaDemoService/HelloWorldClientAndServerStream"
)

// JavaDemoServiceClient is the client API for JavaDemoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JavaDemoServiceClient interface {
	// 一个简单的rpc
	HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// 一个客户端流式rpc
	HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (JavaDemoService_HelloWorldClientStreamClient, error)
	// 一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (JavaDemoService_HelloWorldClientAndServerStreamClient, error)
}

type javaDemoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJavaDemoServiceClient(cc grpc.ClientConnInterface) JavaDemoServiceClient {
	return &javaDemoServiceClient{cc}
}

func (c *javaDemoServiceClient) HelloWorld(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, JavaDemoService_HelloWorld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *javaDemoServiceClient) HelloWorldClientStream(ctx context.Context, opts ...grpc.CallOption) (JavaDemoService_HelloWorldClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JavaDemoService_ServiceDesc.Streams[0], JavaDemoService_HelloWorldClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &javaDemoServiceHelloWorldClientStreamClient{stream}
	return x, nil
}

type JavaDemoService_HelloWorldClientStreamClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type javaDemoServiceHelloWorldClientStreamClient struct {
	grpc.ClientStream
}

func (x *javaDemoServiceHelloWorldClientStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *javaDemoServiceHelloWorldClientStreamClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *javaDemoServiceClient) HelloWorldClientAndServerStream(ctx context.Context, opts ...grpc.CallOption) (JavaDemoService_HelloWorldClientAndServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &JavaDemoService_ServiceDesc.Streams[1], JavaDemoService_HelloWorldClientAndServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &javaDemoServiceHelloWorldClientAndServerStreamClient{stream}
	return x, nil
}

type JavaDemoService_HelloWorldClientAndServerStreamClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type javaDemoServiceHelloWorldClientAndServerStreamClient struct {
	grpc.ClientStream
}

func (x *javaDemoServiceHelloWorldClientAndServerStreamClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *javaDemoServiceHelloWorldClientAndServerStreamClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JavaDemoServiceServer is the server API for JavaDemoService service.
// All implementations must embed UnimplementedJavaDemoServiceServer
// for forward compatibility
type JavaDemoServiceServer interface {
	// 一个简单的rpc
	HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error)
	// 一个客户端流式rpc
	HelloWorldClientStream(JavaDemoService_HelloWorldClientStreamServer) error
	// 一个客户端和服务器端双向流式rpc
	HelloWorldClientAndServerStream(JavaDemoService_HelloWorldClientAndServerStreamServer) error
	mustEmbedUnimplementedJavaDemoServiceServer()
}

// UnimplementedJavaDemoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJavaDemoServiceServer struct {
}

func (UnimplementedJavaDemoServiceServer) HelloWorld(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedJavaDemoServiceServer) HelloWorldClientStream(JavaDemoService_HelloWorldClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientStream not implemented")
}
func (UnimplementedJavaDemoServiceServer) HelloWorldClientAndServerStream(JavaDemoService_HelloWorldClientAndServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method HelloWorldClientAndServerStream not implemented")
}
func (UnimplementedJavaDemoServiceServer) mustEmbedUnimplementedJavaDemoServiceServer() {}

// UnsafeJavaDemoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JavaDemoServiceServer will
// result in compilation errors.
type UnsafeJavaDemoServiceServer interface {
	mustEmbedUnimplementedJavaDemoServiceServer()
}

func RegisterJavaDemoServiceServer(s grpc.ServiceRegistrar, srv JavaDemoServiceServer) {
	s.RegisterService(&JavaDemoService_ServiceDesc, srv)
}

func _JavaDemoService_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JavaDemoServiceServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JavaDemoService_HelloWorld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JavaDemoServiceServer).HelloWorld(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JavaDemoService_HelloWorldClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JavaDemoServiceServer).HelloWorldClientStream(&javaDemoServiceHelloWorldClientStreamServer{stream})
}

type JavaDemoService_HelloWorldClientStreamServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type javaDemoServiceHelloWorldClientStreamServer struct {
	grpc.ServerStream
}

func (x *javaDemoServiceHelloWorldClientStreamServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *javaDemoServiceHelloWorldClientStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _JavaDemoService_HelloWorldClientAndServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JavaDemoServiceServer).HelloWorldClientAndServerStream(&javaDemoServiceHelloWorldClientAndServerStreamServer{stream})
}

type JavaDemoService_HelloWorldClientAndServerStreamServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type javaDemoServiceHelloWorldClientAndServerStreamServer struct {
	grpc.ServerStream
}

func (x *javaDemoServiceHelloWorldClientAndServerStreamServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *javaDemoServiceHelloWorldClientAndServerStreamServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JavaDemoService_ServiceDesc is the grpc.ServiceDesc for JavaDemoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JavaDemoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "javaDemo.v1.javaDemoService",
	HandlerType: (*JavaDemoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloWorld",
			Handler:    _JavaDemoService_HelloWorld_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HelloWorldClientStream",
			Handler:       _JavaDemoService_HelloWorldClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "HelloWorldClientAndServerStream",
			Handler:       _JavaDemoService_HelloWorldClientAndServerStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/javaDemo/v1/javaDemo.proto",
}
