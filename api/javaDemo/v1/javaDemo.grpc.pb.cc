// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: javaDemo/v1/javaDemo.proto

#include "javaDemo/v1/javaDemo.pb.h"
#include "javaDemo/v1/javaDemo.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace javaDemo {
namespace v1 {

static const char* javaDemoService_method_names[] = {
  "/javaDemo.v1.javaDemoService/HelloWorld",
  "/javaDemo.v1.javaDemoService/HelloWorldClientStream",
  "/javaDemo.v1.javaDemoService/HelloWorldClientAndServerStream",
};

std::unique_ptr< javaDemoService::Stub> javaDemoService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< javaDemoService::Stub> stub(new javaDemoService::Stub(channel, options));
  return stub;
}

javaDemoService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_HelloWorld_(javaDemoService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HelloWorldClientStream_(javaDemoService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_HelloWorldClientAndServerStream_(javaDemoService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status javaDemoService::Stub::HelloWorld(::grpc::ClientContext* context, const ::javaDemo::v1::HelloRequest& request, ::javaDemo::v1::HelloResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_HelloWorld_, context, request, response);
}

void javaDemoService::Stub::async::HelloWorld(::grpc::ClientContext* context, const ::javaDemo::v1::HelloRequest* request, ::javaDemo::v1::HelloResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HelloWorld_, context, request, response, std::move(f));
}

void javaDemoService::Stub::async::HelloWorld(::grpc::ClientContext* context, const ::javaDemo::v1::HelloRequest* request, ::javaDemo::v1::HelloResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_HelloWorld_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::javaDemo::v1::HelloResponse>* javaDemoService::Stub::PrepareAsyncHelloWorldRaw(::grpc::ClientContext* context, const ::javaDemo::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::javaDemo::v1::HelloResponse, ::javaDemo::v1::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_HelloWorld_, context, request);
}

::grpc::ClientAsyncResponseReader< ::javaDemo::v1::HelloResponse>* javaDemoService::Stub::AsyncHelloWorldRaw(::grpc::ClientContext* context, const ::javaDemo::v1::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHelloWorldRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::javaDemo::v1::HelloRequest>* javaDemoService::Stub::HelloWorldClientStreamRaw(::grpc::ClientContext* context, ::javaDemo::v1::HelloResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::javaDemo::v1::HelloRequest>::Create(channel_.get(), rpcmethod_HelloWorldClientStream_, context, response);
}

void javaDemoService::Stub::async::HelloWorldClientStream(::grpc::ClientContext* context, ::javaDemo::v1::HelloResponse* response, ::grpc::ClientWriteReactor< ::javaDemo::v1::HelloRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::javaDemo::v1::HelloRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_HelloWorldClientStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::javaDemo::v1::HelloRequest>* javaDemoService::Stub::AsyncHelloWorldClientStreamRaw(::grpc::ClientContext* context, ::javaDemo::v1::HelloResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::javaDemo::v1::HelloRequest>::Create(channel_.get(), cq, rpcmethod_HelloWorldClientStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::javaDemo::v1::HelloRequest>* javaDemoService::Stub::PrepareAsyncHelloWorldClientStreamRaw(::grpc::ClientContext* context, ::javaDemo::v1::HelloResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::javaDemo::v1::HelloRequest>::Create(channel_.get(), cq, rpcmethod_HelloWorldClientStream_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>* javaDemoService::Stub::HelloWorldClientAndServerStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>::Create(channel_.get(), rpcmethod_HelloWorldClientAndServerStream_, context);
}

void javaDemoService::Stub::async::HelloWorldClientAndServerStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::javaDemo::v1::HelloRequest,::javaDemo::v1::HelloResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::javaDemo::v1::HelloRequest,::javaDemo::v1::HelloResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_HelloWorldClientAndServerStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>* javaDemoService::Stub::AsyncHelloWorldClientAndServerStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_HelloWorldClientAndServerStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>* javaDemoService::Stub::PrepareAsyncHelloWorldClientAndServerStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>::Create(channel_.get(), cq, rpcmethod_HelloWorldClientAndServerStream_, context, false, nullptr);
}

javaDemoService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      javaDemoService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< javaDemoService::Service, ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](javaDemoService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::javaDemo::v1::HelloRequest* req,
             ::javaDemo::v1::HelloResponse* resp) {
               return service->HelloWorld(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      javaDemoService_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< javaDemoService::Service, ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>(
          [](javaDemoService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::javaDemo::v1::HelloRequest>* reader,
             ::javaDemo::v1::HelloResponse* resp) {
               return service->HelloWorldClientStream(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      javaDemoService_method_names[2],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< javaDemoService::Service, ::javaDemo::v1::HelloRequest, ::javaDemo::v1::HelloResponse>(
          [](javaDemoService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::javaDemo::v1::HelloResponse,
             ::javaDemo::v1::HelloRequest>* stream) {
               return service->HelloWorldClientAndServerStream(ctx, stream);
             }, this)));
}

javaDemoService::Service::~Service() {
}

::grpc::Status javaDemoService::Service::HelloWorld(::grpc::ServerContext* context, const ::javaDemo::v1::HelloRequest* request, ::javaDemo::v1::HelloResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status javaDemoService::Service::HelloWorldClientStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::javaDemo::v1::HelloRequest>* reader, ::javaDemo::v1::HelloResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status javaDemoService::Service::HelloWorldClientAndServerStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::javaDemo::v1::HelloResponse, ::javaDemo::v1::HelloRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace javaDemo
}  // namespace v1

