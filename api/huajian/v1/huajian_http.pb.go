// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.6.1
// source: api/huajian/v1/huajian.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHuajianGetModel = "/helloworld.v1.Huajian/GetModel"

type HuajianHTTPServer interface {
	// GetModel Sends a greeting
	GetModel(context.Context, *GetModelRequest) (*GetModelReply, error)
}

func RegisterHuajianHTTPServer(s *http.Server, srv HuajianHTTPServer) {
	r := s.Route("/")
	r.GET("/get/{db_name}/{key}", _Huajian_GetModel0_HTTP_Handler(srv))
}

func _Huajian_GetModel0_HTTP_Handler(srv HuajianHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetModelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHuajianGetModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetModel(ctx, req.(*GetModelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetModelReply)
		return ctx.Result(200, reply)
	}
}

type HuajianHTTPClient interface {
	GetModel(ctx context.Context, req *GetModelRequest, opts ...http.CallOption) (rsp *GetModelReply, err error)
}

type HuajianHTTPClientImpl struct {
	cc *http.Client
}

func NewHuajianHTTPClient(client *http.Client) HuajianHTTPClient {
	return &HuajianHTTPClientImpl{client}
}

func (c *HuajianHTTPClientImpl) GetModel(ctx context.Context, in *GetModelRequest, opts ...http.CallOption) (*GetModelReply, error) {
	var out GetModelReply
	pattern := "/get/{db_name}/{key}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHuajianGetModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
