// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: api/huajian/v1/huajian.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Huajian_GetModel_FullMethodName = "/helloworld.v1.Huajian/GetModel"
)

// HuajianClient is the client API for Huajian service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HuajianClient interface {
	// Sends a greeting
	GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelReply, error)
}

type huajianClient struct {
	cc grpc.ClientConnInterface
}

func NewHuajianClient(cc grpc.ClientConnInterface) HuajianClient {
	return &huajianClient{cc}
}

func (c *huajianClient) GetModel(ctx context.Context, in *GetModelRequest, opts ...grpc.CallOption) (*GetModelReply, error) {
	out := new(GetModelReply)
	err := c.cc.Invoke(ctx, Huajian_GetModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HuajianServer is the server API for Huajian service.
// All implementations must embed UnimplementedHuajianServer
// for forward compatibility
type HuajianServer interface {
	// Sends a greeting
	GetModel(context.Context, *GetModelRequest) (*GetModelReply, error)
	mustEmbedUnimplementedHuajianServer()
}

// UnimplementedHuajianServer must be embedded to have forward compatible implementations.
type UnimplementedHuajianServer struct {
}

func (UnimplementedHuajianServer) GetModel(context.Context, *GetModelRequest) (*GetModelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModel not implemented")
}
func (UnimplementedHuajianServer) mustEmbedUnimplementedHuajianServer() {}

// UnsafeHuajianServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HuajianServer will
// result in compilation errors.
type UnsafeHuajianServer interface {
	mustEmbedUnimplementedHuajianServer()
}

func RegisterHuajianServer(s grpc.ServiceRegistrar, srv HuajianServer) {
	s.RegisterService(&Huajian_ServiceDesc, srv)
}

func _Huajian_GetModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HuajianServer).GetModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Huajian_GetModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HuajianServer).GetModel(ctx, req.(*GetModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Huajian_ServiceDesc is the grpc.ServiceDesc for Huajian service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Huajian_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.Huajian",
	HandlerType: (*HuajianServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModel",
			Handler:    _Huajian_GetModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/huajian/v1/huajian.proto",
}
